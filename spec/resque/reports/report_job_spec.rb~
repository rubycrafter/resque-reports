# coding: utf-8
require 'spec_helper'

require 'resque/reports'

class Resque::Reports::MyCsvReport < Resque::Reports::CsvReport
  source :select_data
  encoding UTF8

  directory File.join(Dir.home, '.resque-reports')

  table do |element|
    column 'First', "#{element} - is first" 
  end

  create do |param1, param2|
    @main_param = param1
    @secondary_param = param2
  end

  def select_data
    [:one, @main_param]
  end
end

describe Resque::Reports::ReportJob do
  describe '.execute' do
    let(:my_report) { Resque::Reports::MyCsvReport.new('.execute test','test') }

    before do
      Resque::Reports::MyCsvReport.stub(:new => my_report)
      my_report.stub(:build => nil)
    end

    it { expect(Resque::Reports::MyCsvReport).to receive(:new).with('.execute test','test') }
    it { expect(my_report).to receive(:build).with(true) }

    after { Resque::Reports::ReportJob.execute('Resque::Reports::MyCsvReport', "[\".execute test\", \"test\",true]") }

    context 'when wrong class given' do
      it 'sends invalid class name' do
        expect { Resque::Reports::ReportJob.execute('MyWrongReport', "[true]") }.to raise_error(NameError)
      end

      it 'sends class that is not BaseReport successor' do
        expect { Resque::Reports::ReportJob.execute('Object', "[true]") }.to raise_error(RuntimeError)
      end
    end
  end
end
